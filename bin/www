#!/usr/bin/env node
/* eslint-disable*/
require('babel-register');

var app = require('../app').default;
var debug = require('debug')('v1:server');
var http = require('http');
var placeholder = require("../core/placeholder").default;
var serverConf = placeholder.getBySuffix("server");
var server, port;

/**
 * Create HTTP server.
 */
server = http.createServer(app);

server.on('error', onError);
server.on('listening', onListening);

init(serverConf.port);

process.stdin.resume();// so the program will not close instantly

// close server soft and slow
function exitHandler() {
    process.exit(0);
}

// do something when app is closing
process.on('exit', exitHandler.bind(null, {cleanup: true}));

// catches ctrl+c event
process.on('SIGINT', exitHandler.bind(null, {exit: true}));

function init(configPort) {
    /**
     * Get port from environment and store in Express.
     */
    port = normalizePort(configPort || process.env.PORT || serverConf.port);

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
}


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

    console.info('[Listening on ' + bind + ']');
}